{"version":3,"sources":["axios.js","Request.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentMovies","Banner","string","n","useState","movie","setMovies","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","undefined","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","screenY","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchURL","isLargeRow","movies","map","poster_path","id","HomeScreen","Requests","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","err","alert","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0e6baac.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({baseURL: 'https://api.themoviedb.org/3'});\n\nexport default instance;","const API_KEY='5b855c9c6c100ab2d99268e7cfab027c';\n\nconst requests ={\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentMovies:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import axios from './axios';\nimport React,{useState,useEffect} from 'react'\nimport './Banner.css'\nimport requests from './Request';\n\nfunction Banner() {\n    const [movie, setMovies] = useState([]);\n    useEffect(()=>{\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovies(\n                request.data.results[\n                    Math.floor(Math.random()*request.data.results.length-1)\n                ]\n            );\n            return request;\n        }\n\n        fetchData();\n    },[])\n    console.log(movie)\n    function truncate(string,n){\n        return string!==undefined?  string.length > n ? string.substr(0,n-1)+'...':string:''\n    }\n    return (\n        <header className='banner' style={{\n            backgroundSize:'cover',\n            backgroundImage:`url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\n            backgroundPosition:'center center',\n        }}>\n            <div className='banner_contents'>\n                <h1 className='banner_title'>{movie?.title||movie?.name||movie?.original_name}</h1>\n                <div className='banner_buttons'>\n                    <button className='banner_button'>play</button>\n                    <button className='banner_button'>my playlist</button>\n                </div>\n                <h1 className='banner_description'>\n                    {\n                        truncate(\n                            movie?.overview,150\n                        )\n                    }\n                </h1>\n            </div>\n            <div className='banner_fade_button'></div>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router';\nimport './Nav.css'\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n    const history = useHistory();\n\n    const transitionNavBar = () => {\n        console.log(window.screenY)\n        if (window.scrollY > 100) {\n            handleShow(true);\n        } else {\n            handleShow(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('scroll', transitionNavBar);\n        return () => window.removeEventListener('scroll', transitionNavBar);\n    }, [])\n\n    return (\n        <div className={`nav ${show && 'nav_black'}`}>\n            <div className='nav_contents'></div>\n            <img\n                onClick={() => history.push('/')}\n                className='nav_logo'\n                src='https://i1.wp.com/freepngimages.com/wp-content/uploads/2016/10/netflix-logo.png?fit=895%2C559'\n                alt=''\n            />\n            <img\n                onClick={() => history.push('/profile')}\n                className='nav_avatar'\n                src='https://i.pinimg.com/originals/eb/b0/2a/ebb02aedec9bc74f65e38311c7e14d34.png'\n                alt=''\n            />\n        </div>\n    )\n}\n\nexport default Nav\n","import axios from './axios';\nimport React,{useEffect,useState} from 'react'\nimport './Row.css'\n\nfunction Row({title,fetchURL,isLargeRow=false}) {\n    const [movies, setMovies] = useState([]);\n    const baseURLImage='https://image.tmdb.org/t/p/original/';\n\n    useEffect(()=>{\n        async function fetchData(){\n            const request = await axios.get(fetchURL);\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    },[fetchURL]);\n\n    return (\n        <div className='row'>\n            <h2>{title}</h2>\n            <div className='row_posters'>\n                {movies.map((movie) => (\n                    ((isLargeRow && movie.poster_path) || (!isLargeRow && movie.backdrop_path)) && (\n                        <img \n                            key={movie.id}\n                            src={`${baseURLImage}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                            alt={movie.name}\n                            className={`row_poster ${isLargeRow && 'row_poster_large'}`}\n                        />\n                    )\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Row\n","import React from 'react'\nimport './HomeScreen.css'\nimport Banner from '../Banner'\nimport Nav from '../Nav'\nimport Requests from '../Request'\nimport Row from '../Row'\n\nfunction HomeScreen() {\n    return (\n        <div className='homeScreen'>\n            {/* Nav */}\n            <Nav/>\n            {/* Banner */}\n            <Banner/>\n            {/* Row */}\n            <Row\n                title='NEXTFLIX ORIGINAL'\n                fetchURL= {Requests.fetchNetflixOriginals}\n                isLargeRow\n            />\n            <Row title='Top Rated' fetchURL= {Requests.fetchTopRated}/>\n            <Row title='Action Movies' fetchURL= {Requests.fetchActionMovies}/>\n            <Row title='Comedy Movies' fetchURL= {Requests.fetchComedyMovies}/>\n            <Row title='Horror Movies' fetchURL= {Requests.fetchHorrorMovies}/>\n            <Row title='Romance Movies' fetchURL= {Requests.fetchRomanceMovies}/>\n            <Row title='Document Movies' fetchURL= {Requests.fetchDocumentMovies}/>\n        </div>\n    )\n}\n\nexport default HomeScreen\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDtkDjRRL0uqtfQIlnBJEww_sZuvBdPOYo\",\n  authDomain: \"netflix-clone-d38ea.firebaseapp.com\",\n  projectId: \"netflix-clone-d38ea\",\n  storageBucket: \"netflix-clone-d38ea.appspot.com\",\n  messagingSenderId: \"833486965167\",\n  appId: \"1:833486965167:web:d6d259eb8e62980858c75a\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport {auth};\nexport default db;","import React, { useRef } from 'react'\nimport { auth } from '../firebase';\nimport './SignupScreen.css'\n\nfunction SignupScreen() {\n    const emailRef = useRef(null);\n    const passwordRef = useRef(null);\n    const register=(e)=>{\n        e.preventDefault();\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n        .then((authUser)=>{\n\n        })\n        .catch((err)=>alert(err));\n    }\n    const signin=(e)=>{\n        e.preventDefault();\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n        .then((authUser)=>{\n\n        })\n        .catch((err)=>alert(err));\n    }\n    return (\n        <div className='signupScreen'>\n            <form>\n                <h1>SIGN IN</h1>\n                <input ref={emailRef} type='email' placeholder='Email Address'/>\n                <input ref={passwordRef} type='password' placeholder='password'/>\n                <button type='submit' onClick={signin}>Sign in</button>\n\n                <h4>\n                    <span className='signupScreen_gray'>New to Netflix?</span> \n                    <span className='signupScreen_link' onClick={register}>Signup now.</span>\n                </h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignupScreen\n","import React,{useState,useEffect} from 'react'\nimport './LoginScreen.css'\nimport SignupScreen from './SignupScreen'\n\nfunction LoginScreen() {\n    const [signIn, setSignIn] = useState(false)\n    return (\n        <div className='loginScreen'>\n            <div className='loginScreen_background'>\n                <img \n                src='https://i1.wp.com/freepngimages.com/wp-content/uploads/2016/10/netflix-logo.png?fit=895%2C559' \n                alt='' \n                className='loginScreen_logo'/>\n                <button onClick={()=>setSignIn(true)}\n                 className='loginScreen_button'>Sign in</button>\n            </div>\n\n            <div className='loginScreen_gradient'></div>\n\n            <div className='loginScreen_body'>\n                {\n                    signIn \n                    ? (<SignupScreen/>)\n                    : <>\n                        <h1>Unlimited films, TV programs and more.</h1>\n                        <h2>Watch anywhere. Cancel at any time.</h2>\n                        <h3>Ready to watch? Enter your email to create or start your membership</h3>\n                        <div className='loginScreen_input'>\n                            <form>\n                                <input type='email' placeholder='Email Address'/>\n                                <button onClick={()=>setSignIn(true)}\n                                className='loginScreen_getStart'>GET START</button>\n                            </form>\n                        </div>\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default LoginScreen\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  user:null\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    login:(state,action)=>{\n      state.user=action.payload\n    },\n    logout:(state)=>{\n      state.user=null\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/userSlice'\nimport { auth } from '../firebase'\nimport Nav from '../Nav'\nimport './ProfileScreen.css'\n\nfunction ProfileScreen() {\n    const user = useSelector(selectUser);\n\n    return (\n        <div className='profileScreen'>\n            <Nav/>\n            <div className='profileScreen_body'>\n                <h1>Edit profile</h1>\n                <div className='profileScreen_info'>\n                    <img\n                        className='profileScreen_avatar'\n                        src='https://i.pinimg.com/originals/eb/b0/2a/ebb02aedec9bc74f65e38311c7e14d34.png'\n                        alt=''\n                    />\n                    <div className='profileScreen_details'>\n                        <h2>{user.email}</h2>\n                        <div className='profileScreen_plans'>\n                            <button\n                                onClick={()=>auth.signOut()}\n                                className='profileScreen_signout'>Sign out</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileScreen\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Login from './screens/LoginScreen';\nimport { auth } from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch=useDispatch();\n  useEffect(()=>{\n    const unscup = auth.onAuthStateChanged(userAuth=>{\n      if(userAuth){\n        dispatch(login({\n          uid:userAuth.uid,\n          email:userAuth.email\n        }))\n      }else{\n        dispatch(logout())\n      }\n    });\n    return unscup;\n  },[])\n  return (\n    <div className=\"App\">\n      <Router>\n        {!user \n        ? (<Login/>) \n        : (<Switch>\n            <Route path=\"/profile\">\n              <ProfileScreen />\n            </Route>\n            <Route path=\"/\">\n              <HomeScreen />\n            </Route>\n        </Switch>)}\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
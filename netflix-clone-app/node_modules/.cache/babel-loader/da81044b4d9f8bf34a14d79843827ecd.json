{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\nconst initialState = {\n  user: null\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = userSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/vuongnguyen/Desktop/reactjs/netflix-clone-app/src/features/userSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","user","incrementAsync","amount","response","data","userSlice","name","reducers","login","state","action","payload","logout","extraReducers","builder","addCase","pending","status","fulfilled","value","increment","decrement","incrementByAmount","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC;AADc,CAArB,C,CAIA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOM,MAAP,IAAkB;AAChB,QAAMC,QAAQ,GAAG,MAAML,UAAU,CAACI,MAAD,CAAjC,CADgB,CAEhB;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;AACnCS,EAAAA,IAAI,EAAE,MAD6B;AAEnCP,EAAAA,YAFmC;AAGnC;AACAQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACpBD,MAAAA,KAAK,CAACT,IAAN,GAAWU,MAAM,CAACC,OAAlB;AACD,KAHO;AAIRC,IAAAA,MAAM,EAAEH,KAAD,IAAS;AACdA,MAAAA,KAAK,CAACT,IAAN,GAAW,IAAX;AACD;AANO,GAJyB;AAYnC;AACA;AACAa,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWd,cAAc,CAACe,OAD1B,EACoCP,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACQ,MAAN,GAAe,SAAf;AACD,KAHH,EAIGF,OAJH,CAIWd,cAAc,CAACiB,SAJ1B,EAIqC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACQ,MAAN,GAAe,MAAf;AACAR,MAAAA,KAAK,CAACU,KAAN,IAAeT,MAAM,CAACC,OAAtB;AACD,KAPH;AAQD;AAvBkC,CAAD,CAA7B;AA0BP,OAAO,MAAM;AAAES,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CjB,SAAS,CAACkB,OAA9D,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIf,KAAD,IAAWA,KAAK,CAACgB,OAAN,CAAcN,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMO,cAAc,GAAIxB,MAAD,IAAY,CAACyB,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACL,iBAAiB,CAACpB,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAeG,SAAS,CAACyB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\n\nconst initialState = {\n  user:null\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login:(state,action)=>{\n      state.user=action.payload\n    },\n    logout:(state)=>{\n      state.user=null\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
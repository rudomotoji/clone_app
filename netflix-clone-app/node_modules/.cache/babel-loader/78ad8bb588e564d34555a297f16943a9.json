{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\nconst initialState = {\n  user: null\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    }\n  }\n});\nexport const {\n  login,\n  logout\n} = userSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/vuongnguyen/Desktop/reactjs/netflix-clone-app/src/features/userSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","user","userSlice","name","reducers","login","state","action","payload","logout","actions","selectCount","counter","value","incrementIfOdd","amount","dispatch","getState","currentValue","incrementByAmount","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC;AADc,CAArB;AAIA,OAAO,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AACnCK,EAAAA,IAAI,EAAE,MAD6B;AAEnCH,EAAAA,YAFmC;AAGnCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACpBD,MAAAA,KAAK,CAACL,IAAN,GAAWM,MAAM,CAACC,OAAlB;AACD,KAHO;AAIRC,IAAAA,MAAM,EAAEH,KAAD,IAAS;AACdA,MAAAA,KAAK,CAACL,IAAN,GAAW,IAAX;AACD;AANO;AAHyB,CAAD,CAA7B;AAaP,OAAO,MAAM;AAAEI,EAAAA,KAAF;AAASI,EAAAA;AAAT,IAAoBP,SAAS,CAACQ,OAApC,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIL,KAAD,IAAWA,KAAK,CAACM,OAAN,CAAcC,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGP,WAAW,CAACM,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACG,iBAAiB,CAACJ,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAeb,SAAS,CAACkB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\n\nconst initialState = {\n  user:null\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    login:(state,action)=>{\n      state.user=action.payload\n    },\n    logout:(state)=>{\n      state.user=null\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}